// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RelationshipApp.Infrastructure.Data;

#nullable disable

namespace RelationshipApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RelationshipApp.Core.Entities.AnonymousNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note_text");

                    b.Property<DateTime?>("RevealedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revealed_at");

                    b.Property<Guid?>("SubmitUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("submit_user_id");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("SubmitUserId");

                    b.HasIndex("SubmittedAt");

                    b.ToTable("anonymous_notes", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Couple", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.ToTable("couples", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.CoupleMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("UserId");

                    b.ToTable("couple_members", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.GameRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("RoundType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("round_type");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("game_rounds", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("progress");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("target_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("goals", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.LikeDislike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRevealed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revealed");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("likes_dislikes", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.MemoryBoardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("media_url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("memory_board_items", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Mood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MoodValue")
                        .HasColumnType("integer")
                        .HasColumnName("mood");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("moods", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.PersonalityTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("score");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("test_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("personality_tests", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.QuestionCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Pack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pack");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Pack");

                    b.ToTable("question_cards", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Streak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoupleId")
                        .HasColumnType("uuid")
                        .HasColumnName("couple_id");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_streak");

                    b.Property<DateTime>("LastCheckedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_checked_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CoupleId");

                    b.HasIndex("UserId");

                    b.ToTable("streaks", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.AnonymousNote", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("AnonymousNotes")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "SubmitUser")
                        .WithMany()
                        .HasForeignKey("SubmitUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Couple");

                    b.Navigation("SubmitUser");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.CoupleMember", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("Members")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "User")
                        .WithMany("CoupleMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.GameRound", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("GameRounds")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Goal", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("Goals")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.LikeDislike", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("LikesDislikes")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "User")
                        .WithMany("LikesDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.MemoryBoardItem", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("MemoryBoardItems")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "User")
                        .WithMany("MemoryBoardItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Mood", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("Moods")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "User")
                        .WithMany("Moods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.PersonalityTest", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("PersonalityTests")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "User")
                        .WithMany("PersonalityTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Streak", b =>
                {
                    b.HasOne("RelationshipApp.Core.Entities.Couple", "Couple")
                        .WithMany("Streaks")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationshipApp.Core.Entities.User", "User")
                        .WithMany("Streaks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Couple");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.Couple", b =>
                {
                    b.Navigation("AnonymousNotes");

                    b.Navigation("GameRounds");

                    b.Navigation("Goals");

                    b.Navigation("LikesDislikes");

                    b.Navigation("Members");

                    b.Navigation("MemoryBoardItems");

                    b.Navigation("Moods");

                    b.Navigation("PersonalityTests");

                    b.Navigation("Streaks");
                });

            modelBuilder.Entity("RelationshipApp.Core.Entities.User", b =>
                {
                    b.Navigation("CoupleMembers");

                    b.Navigation("LikesDislikes");

                    b.Navigation("MemoryBoardItems");

                    b.Navigation("Moods");

                    b.Navigation("PersonalityTests");

                    b.Navigation("Streaks");
                });
#pragma warning restore 612, 618
        }
    }
}
